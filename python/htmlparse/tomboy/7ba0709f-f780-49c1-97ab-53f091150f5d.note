<?xml version="1.0" encoding="utf-8"?>
<note version="0.3" xmlns:link="http://beatniksoftware.com/tomboy/link" xmlns:size="http://beatniksoftware.com/tomboy/size" xmlns="http://beatniksoftware.com/tomboy">
  <title>Java- Interview questions</title>
  <text xml:space="preserve"><note-content version="0.1">Java- Interview questions 

The following code will give

1:     Byte b1 = new Byte("127");
2:
3:     if(b1.toString() == b1.toString())
4:        System.out.println("True");
5:     else
6:        System.out.println("False");

A) Compilation error, toString() is not avialable for Byte.
B) Prints "True".
C) Prints "False". - Correct

1:    public class Q10
2:    {
3:       public static void main(String[] args)
4:       {
5:          int i = 10;
6:          int j = 10;
7:          boolean b = false;
8:
9:          if( b = i == j)
10:            System.out.println("True");
11:         else
12:            System.out.println("False");
13:      }
14:   }

A) Compilation error at line 9 .
B) Runtime error exception at line 9.
C) Prints "True". //Conditional Operators has high precedence - Correct
D) Prints "False


What is the output of the following code?

1:    class Test
2:    {
3:        Test(int i)
4:        {
5:            System.out.println("Test(" +i +")");
6:        }
7:    }
8:
9:    public class Q12
10:   {
11:        static Test  t1 = new Test(1);
12:
13:        Test         t2 = new Test(2);
14:
15:        static Test  t3 = new Test(3);
16:
17:        public static void main(String[] args)
18:        {
19:            Q12 Q = new Q12();
20:        }
21:    }

A) Test(1)
    Test(2)
    Test(3)

B) Test(3)
    Test(2)
    Test(1)

C) Test(2)
    Test(1)
    Test(3)

D) Test(1)
    Test(3)
    Test(2) - Correct


What is the output of the following code?

1:    int i = 45678;
2:    int j = ~i;
3:
4:    System.out.println(j);

A) Compilation error at line 2. ~ operator applicable to boolean values only.
B) Prints 45677.
C) Prints -45677.
D) Prints -45679.///(-i)-1  -Correct


What will happen when you invoke the following method?

1:    void infiniteLoop()
2:    {
3:        byte b = 1;
4:
5:        while ( ++b &gt; 0 )
6:            ;
7:        System.out.println("Welcome to Java");
8:    }

Note: Value goes like this: 0,1,2---127, -128,-127,-126....-2,-1,0,1,2,3

A) The loop never ends(infiniteLoop).
B) Prints "Welcome to Java".//Here the variable 'b' will go upto 127. After that overflow will occur, so 'b' will be set to -ve value, the loop ends and prints "Welcome to Java" - Correct
C) Compilation error at line 5. ++ operator should not be used for byte type variables.
D) Prints nothing.

1:    class MyClass
2:    {
3:        static int maxElements;
4:
5:        MyClass(int maxElements)
6:        {
7:            this.maxElements = maxElements;
8:        }
9:
10:    }
11:
12:    public class Q19
13:    {
14:        public static void main(String[] args)
15:        {
16:
17:            MyClass a = new MyClass(100);
18:            MyClass b = new MyClass(100);
19:
20:            if(a.equals(b))
21:                System.out.println("Objects have the same values");
22:            else
23:                System.out.println("Objects have different values");
24:        }
25:    }

A) Compilation error at line 20. equals() method was not defined.
B) Compiles fine, runtime exception at line 20.
C) Prints "Objects have the same values".
D) Prints "Objects have different values". //Default equals implementation of Object class



What will happen if you compile/run the following code?

1:  public class Q21
2:  {
3:      int maxElements;
4:
5:      void Q21()
6:      {
7:          maxElements = 100;
8:          System.out.println(maxElements);
9:      }
10:
11:     Q21(int i)
12:     {
13:          maxElements = i;
14:          System.out.println(maxElements);
15:     }
16:
17:     public static void main(String[] args)
18:     {
19:          Q21 a = new Q21();
20:          Q21 b = new Q21(999);
21:     }
22:  }

A) Prints 100 and 999.
B) Prints 999 and 100.
C) Compilation error at line 3, variable maxElements was not initialized.
D) Compillation error at line 19. //Constructors should not return any value. Java won't allow to indicate with void. In this case void Q21() is an ordinary method which has the same name of the Class.



What will happen if run the following code?

1:  Boolean[] b1 = new Boolean[10];
2:
3:  boolean[] b2 = new boolean[10];
4:
5:  System.out.println("The value of b1[1] = " +b1[1]);
6:  System.out.println("The value of b2[1] = " +b2[1]);

A) Prints The value of b1[1] = false
               The value of b2[1] = false

B) Prints The value of b1[1] = null
              The value of b2[1] = null

//By default objects will be initialized to null and primitives to their corresponding default vaulues. The same rule applies to array of objects and primitves.
C) Prints The value of b1[1] = null
               The value of b2[1] = false

D) Prints The value of b1[1] = false
              The value of b2[1] = null




Which of the following are valid array declarations/definitions?

1:  int iArray1[10];
2:  int iArray2[];
3:  int iArray3[]   = new int[10];
4:  int iArray4[10] = new int[10];
5:  int []iArray5   = new int[10];
6:  int iArray6[]   = new int[];
7:  int iArray7[]   = null;

A) 1.
B) 2.
C) 3.
D) 4.
E) 5.
F) 6.
G) 7.

Answer : B, C, E and G

Explanation : You can't specify the array dimension in type specification(left hand side), so A and D are invalid. In line 6 the array dimension is missing(right hand side) so F is invalid. Because array is a reference, you can intialize an array with null. so G is valid.


What is the output for the following lines of code?

1:  System.out.println(" " +2 + 3);
2:  System.out.println(2 + 3);
3:  System.out.println(2 + 3 +"");
4:  System.out.println(2 + "" +3);

A) Compilation error at line 3
B) Prints 23, 5, 5 and 23.	- Correct. As soon as the string is encountered, remaining expression becomes string evaluation.
C) Prints 5, 5, 5 and 23.
D) Prints 23, 5, 23 and 23.

static final transient int maxElements = 100; //Is Correct

What will happen if you compile/run the following lines of code?

1:  int[] iArray = new int[10];
2:
3:  iArray.length = 15;
4:
5:  System.out.println(iArray.length);

A) Prints 10.
B) Prints 15.
C) Compilation error, you can't change the length of an array. //Once array is created then it is not possible to change the length of the array.

D) Runtime exception at line 3.


What will happen if you compile/run the folowing lines of code?

1:  Vector a = new Vector();
2:
3:  a.addElement(10);
4:
5:  System.out.println(a.elementAt(0));

A) Prints 10.
B) Prints 11.
C) Compilation error at line 3. // - Correct, You can't add primitives to Vector.
D) Prints some garbage.


What will happen if you invoke the following method?

1:  public void check()
2:  {
3:      System.out.println(Math.min(-0.0,+0.0));
4:      System.out.println(Math.max(-0.0,+0.0));
5:      System.out.println(Math.min(-0.0,+0.0) == Math.max(0.0,+0.0));
6:  }

A) prints -0.0, +0.0 and false.
B) prints -0.0, +0.0 and true. 
//The order of floating/double values is -Infinity --&gt; Negative Numbers/Fractions --&gt; -0.0 --&gt; +0.0 --&gt; Positive Numbers/Fractions --&gt; Infinity.

C) prints 0.0, 0.0 and false.
D) prints 0.0, 0.0 and true.

What will happen if you compile/run this code?

1:  int i = 012;
2:  int j = 034;
3:  int k = 056;
4:  int l = 078;
5:
6:  System.out.println(i);
7:  System.out.println(j);
8:  System.out.println(k);

A) Prints 12,34 and 56.
B) Prints 24,68 and 112.
C) Prints 10, 28 and 46.
D) Compilation error. // Here integers are assinged by octal values. Octal numbers will contain digits from 0 to 7. 8 is illegal digit for an octal value, so you get compilation erro


When executed the following line of code will print
        System.out.println(-1 * Double.NEGATIVE_INFINITY);

A) -Infinity
B) Infinity   //
C) NaN
D) -NaN


</note-content></text>
  <last-change-date>2010-11-07T18:17:54.6718240+01:00</last-change-date>
  <last-metadata-change-date>2012-01-25T11:50:43.7461560+01:00</last-metadata-change-date>
  <create-date>2010-11-07T17:55:25.6044040+01:00</create-date>
  <cursor-position>1822</cursor-position>
  <selection-bound-position>-1</selection-bound-position>
  <width>450</width>
  <height>360</height>
  <x>0</x>
  <y>0</y>
  <tags>
    <tag>system:notebook:Java</tag>
  </tags>
  <open-on-startup>False</open-on-startup>
</note>