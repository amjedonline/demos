<?xml version="1.0" encoding="utf-8"?>
<note version="0.3" xmlns:link="http://beatniksoftware.com/tomboy/link" xmlns:size="http://beatniksoftware.com/tomboy/size" xmlns="http://beatniksoftware.com/tomboy">
  <title>SimpleDateFormat</title>
  <text xml:space="preserve"><note-content version="0.1">SimpleDateFormat

ORMs like hibernate<link:url>/toplink/iBatis</link:url> and now JPA oflate are used so much so that the programmers have forgotten how to deal with the <link:internal>date</link:internal> and times when it comes to persisting the java <link:internal>date</link:internal>/time objects to the <link:internal>databases</link:internal>.

I got this feeling recently while writing some code to persist and retrieve back the <link:internal>date</link:internal> time information with JDBC. 
This got me excited to look around for similar patterns in our half baked product and address it in a better way.

I decided that the code am going to write will  meets these conditions:
1.	No loss of information, not even milliseconds.
2.	Persistence in an format-free locale free format.
3.	Formatting is decoupled with the persistence.

Am going to show you the method I have used to achieve this and also try to mention rational behind the approach wherever needed.

To start with, the database am using ( <link:internal>MySQL</link:internal>) has got 5 <link:internal>data types</link:internal> that we are interested in.
Courtesy(<link:url>http://dev.mysql.com/doc/refman/5.0/en/date-and-time-types.html</link:url>)
DATETIME, <link:internal>DATE</link:internal>, TIMESTAMP, TIME, and YEAR.

I had to persist a <italic>created</italic> field that will hold the object created <link:internal>date</link:internal> and time.
Needless to say, <link:internal>DATE</link:internal>, TIME and YEAR were not the right candidates to use.

Now the TIMESTAMP data type is pretty interesting in <link:internal>MySQL</link:internal>.
It has a range of '1970-01-01 00:00:01' UTC to '2038-01-19 03:14:07' UTC, but has an automatic updating behaviour.

So the right candidate was the datetime type, with the supported range of '1000-01-01 00:00:00' to '9999-12-31 23:59:59'. 

so i went ahead and added the column in my table with

Alter table mytable add column created datetime NULL;

Now the second step is to use a proper java type to hold the information</note-content></text>
  <last-change-date>2011-02-16T14:16:42.6691580+05:30</last-change-date>
  <last-metadata-change-date>2011-02-16T14:16:42.6691580+05:30</last-metadata-change-date>
  <create-date>2010-01-23T15:50:38.8342310+05:30</create-date>
  <cursor-position>0</cursor-position>
  <width>450</width>
  <height>360</height>
  <x>0</x>
  <y>0</y>
  <tags>
    <tag>system:notebook:blog</tag>
  </tags>
  <open-on-startup>False</open-on-startup>
</note>