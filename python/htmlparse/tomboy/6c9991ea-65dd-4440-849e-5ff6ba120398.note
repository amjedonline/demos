<?xml version="1.0" encoding="utf-8"?>
<note version="0.3" xmlns:link="http://beatniksoftware.com/tomboy/link" xmlns:size="http://beatniksoftware.com/tomboy/size" xmlns="http://beatniksoftware.com/tomboy">
  <title>GTK and PyGTK</title>
  <text xml:space="preserve"><note-content version="0.1">GTK and PyGTK


<bold>gtk.WINDOW_TOPLEVEL : </bold>
Specifies that we want the
window to undergo window manager decoration and placement. Rather than create a window of 0x0 size, a window
without children is set to 200x200 by default so you can still manipulate it.


<bold>main()</bold>
Invokes the GTK+ main event processing loop to handle mouse and keyboard events as well as window events

gtk,main_quit()

do it on destroy method, usually <link:internal>self</link:internal>.window.connect("destroy", <link:internal>self</link:internal>.destroy)


<bold><size:large>Signals</size:large></bold>

From GTK 2.0, signal system has been moved from GTK to GLib.

GTK is an event driven toolkit, it seep in gtk,main() until an event occurs ad control isp assed to the appropriate function.

Signals could be inherited like "destroy" and there are widget specific such as "toggled" on a toggle button.


<bold>connect()</bold>
object.connect() is defined in the GTKWidget,  GObject class.

handler_id=object.conntect(named, func, func_data)

name - name of the signal
func - callback function
func_data - the data you wish to pass to this function.

handler_id - could be used to disconnect or block the handler.


<bold>connect_object() </bold>lets us pass the callback function ( which takes one paramtere and not two like the callback method).

Ex:
button.connect_object("clicked", gtk.Widget,destroy, <link:internal>self</link:internal>.window)

We are passing the window object to tje gtk.Widget.destroy method to destroy our window.
And we are not passing any addition data as 2 parameter.


<bold>callback function </bold>:

def callback_func(widget, callback_data):

widget - that emitted the signal
callback_data - a pointer to the data given as the last argument to the connect() method.

If the callback function is an object method, then it will have the general form:

def callback_meth(<link:internal>self</link:internal>, widget, callback_data):

<bold><size:large>Events:</size:large></bold>
Set of events reflect the X event mechanism.
ex:
button_press_event
button_release_event
scroll_event
delete_event
destroy_event
expose_event

use connect() to connect the events to the callback.

<bold>Callbacks</bold> have a different form.
Notice the event argument in here.

def callback_fun(widget, event, callback_data)
def callback_meth(<link:internal>self</link:internal>, widget, event, callback_data):

<bold>GDKEvent </bold>object has <italic>type</italic> attribute indicating which event has occurred.
Other attributes depend on the type of the event.
Possible values for the <link:internal>types</link:internal> are:
NOTHING
DELETE
DESTROY
EXPOSE
MOTION_NOTIFY
BUTTON_PRESS
KEY_PRESS
KEY_RELEASE
SCROLL
WINDOW_STATE

These values are accessed by prefacing the event type with gtk,gdk,
Ex: gtk.gdk,DRAG_ENTER.

<bold>Connection example:</bold>

button.connect("button_press_event", button_press_callback)

def button_press_callback(widget, event, data)

Value return indicates whether the event should be propogated further by the GTK+ event mechanism.
Returning True indicates that the event has been handled and should not be propogated.


recommendation: callback last param, <bold> data</bold> should defined with a default value of None because PyGTK will not
pass a data value if it is not included in the connect() call; this would trigger an error since the callback is expecting
three parameters and may receive only two. 


<bold>Packing call - packing widgets</bold>



remember to call main_quit first and destroy on Widget.destroy with window argument next.
Same order while adding the callback/connecting to the events emitted from the UI component

<bold><size:large>Packing</size:large></bold>
<bold>2 layouts</bold>
VBox
HBox

pack_start() -  Left - Right | <link:internal>Top</link:internal> - Bottom
pack_end() - Right - Left | Bottom - <link:internal>Top</link:internal>

<bold>Syntax</bold>
box.pack_start(child, expand, fill, padding)
</note-content></text>
  <last-change-date>2011-03-19T21:03:47.6421140+01:00</last-change-date>
  <last-metadata-change-date>2011-03-19T21:03:47.6421140+01:00</last-metadata-change-date>
  <create-date>2010-04-24T08:08:12.8739760+02:00</create-date>
  <cursor-position>3440</cursor-position>
  <width>450</width>
  <height>360</height>
  <x>0</x>
  <y>0</y>
  <tags>
    <tag>system:notebook:Linux</tag>
  </tags>
  <open-on-startup>False</open-on-startup>
</note>