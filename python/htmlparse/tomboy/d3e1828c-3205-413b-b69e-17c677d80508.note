<?xml version="1.0" encoding="utf-8"?>
<note version="0.3" xmlns:link="http://beatniksoftware.com/tomboy/link" xmlns:size="http://beatniksoftware.com/tomboy/size" xmlns="http://beatniksoftware.com/tomboy">
  <title>Servlets</title>
  <text xml:space="preserve"><note-content version="0.1">Servlets


Other technologies:
CGI,
Netscape Server API ( NSAPI)
Apache Modules

<bold><size:large>Compatibility</size:large></bold>

<bold>HttpSessionListener.sessionDestroyed:</bold>
Version &lt; 2.4 -&gt;	Notification , that the server is invalidated.
Version &gt; 2.4 -&gt;	Notification, that the server is about to be invalidated.

<bold>Version 2.5, methods added</bold>
<bold>ServerletRequest interface:</bold>
int getRemotePort()
getLocalName()
getLocalAddr()
getLocalPort()


2 classes, that implement Server interface: GenericServlet and HttpServlet

Default:
Container handles concurrent requests to the same servlet by concurrent execution of the service method on different threads.
HttpServlet <italic>abstract subclass </italic>defines methods:
doGet
doPost
doPut
doDelete
dohead
doOptions
dotrace

getLastModified() - <italic>Conditional get</italic>

<bold>Number of instances:</bold>
Default: One instance per JVM.
If SingleTreadModel interface is implemented, multiple instances of Servlet in each JVM.
 

For <link:internal>JSP</link:internal>:
Multiple Servlets are created and pooled.
Entry into service method is synchronized.
&lt;%@page isThreadSafe="false" %&gt;

SingleThreadModel is <italic>deprecated in Version 2.5</italic>

With SingleThreadModel container can use instance pool and serialize requests.

is that why Servlets are marked as Serializable ?

Request and response objects must be accessed only within the life cycle methods of the Servlet for deterministic behavior.


<bold>Synchronize</bold>
If service method is synchronized, container cannot use the instance pool approach, but must serialized the request through it.
Do not use this.

<bold>Initialization:</bold>
Can throw UnavailableException or a ServetException
destroy method is not called if not initialized unsuccessfuly

UnavailableException indicates a minimum time of unavailability

Dont try to establish connections to DB or EJB when only static init methods have been invoked.


<bold><size:large>HTTPServletRquest</size:large></bold>
Encapsulates all information from the client request.

<bold>ServletRequest:</bold>
<list><list-item dir="ltr">getParameter()
</list-item><list-item dir="ltr">getParameterNames()
</list-item><list-item dir="ltr">getParameterValues()
</list-item><list-item dir="ltr">getParameterMap()</list-item></list>

Query string data is presented before the post data. (as param value)

<bold>Path parameters</bold>
getRequestURI()
getPathInfo()

Servlet to Servlet communication via <italic>RequestDispather</italic>, and request <italic>Attributes</italic>.
Attr beginning with java., javax, sun, com.sun. are reserved.

getHeader()
getHeaders()
getHeaderNames

header can contain either int or <link:internal>date</link:internal> data
getIntHeader()
getDateHeader()

<bold><size:large>Request path elements</size:large></bold>

<list><list-item dir="ltr"><bold>Context Path</bold>
<list><list-item dir="ltr">Associated with ServletContext
</list-item><list-item dir="ltr">For context at root, this is empty
</list-item><list-item dir="ltr">Starts with / and doesnt end with it.</list-item></list></list-item></list>

<list><list-item dir="ltr"><bold>Servlet Path</bold>
<list><list-item dir="ltr">Corresponds to the mapping which activated this request.
</list-item><list-item dir="ltr">Starts with a / char
</list-item><list-item dir="ltr">Empty, when matched with the /* pattern.</list-item></list></list-item></list>

<list><list-item dir="ltr"><bold>PathInfo</bold>
<list><list-item dir="ltr">Part of request path, that is not part of ContextPath or the Servlet Path.
</list-item><list-item dir="ltr">Either null or a string with a leading </list-item></list></list-item></list>

requestUri = contextPath + ServletPath + pathInfo

<bold>Methods:</bold>
<list><list-item><list><list-item dir="ltr">getContextPath()
</list-item><list-item dir="ltr">getServletPath()
</list-item><list-item dir="ltr">getPathInfo()</list-item></list></list-item></list>

<bold>Path Translation Methods</bold>
To obtain file system path equivalent to particular path
ServletContext.getRealpath()
HttpServletRequest.getPathTranslated()

<bold>cookies</bold>
getCookies

I18N
getLocale()
getLocales()


<bold><size:large>ServletContext</size:large></bold>

Single instance for each JVM.
Default servlet context is not distributable.

getInitParameter()
getInitPatameterNames()

<bold>Attributes</bold>
In a distributed container, ServletContext should not be used as shared <link:internal>memory</link:internal> store.
Place the information into a session, DB, EJB component.

Take relative path, and returns full path.
getResource()
getResourceAsStream()


<bold>Temporary Directory</bold> is made available with <italic>javax.servlet.context.tempdir</italic> context attribute. 

<bold><size:large>Response</size:large></bold>

<bold>Buffer</bold>
Allowed but not required to buffer.
getBufferSize/set
isCommitted()
reset()
resetBuffer()
flushBuffer()

<bold>Headers</bold>
setHeader
addHeader()
setIntHeader()/add()
setDateheader()/add()

Convenience Methods:
sendRedirect()
sendError()

<bold><size:large>Filters</size:large></bold>
Transform content of HTTP requests and response and header information.
Can act on dynamic/static content.

<bold>Mapping</bold>
Servlet name : &lt;servlet-name/&gt;
Url Pattern: &lt;url-pattern/&gt;
or both

init(FilterConfig)

one filter per &lt;filter&gt; declaration for each JVM

Filter can pass on to the next filter or choose to stop the chain and return the response.


<bold><size:huge>Session</size:huge></bold>
<bold>Cookies</bold>
Name of the session tracking cookie must be <bold><italic>JSESSIONID.</italic></bold>

<bold>SSL Sessions</bold>
Has built-in metchanism allowing multiple requests from a client to be identified as being part of a session.

<bold>URL Rewriting</bold>
Involves adding a data, a session ID, to the URL path that is interpreted by the container to associate the request with a session.
Session ID must be encoded as a path parameter in URL string.
Name of the parameter must be <bold>jsessionid</bold>
ex: <link:url>http://www.myserver.com/catalog/index.html;jsessionid=1234</link:url>

<italic>HttpSessionBindingListener </italic>
valueBound
valueUnbound

getMaxInactiveInterval/set()
-1 will never expire

getLastAccessTime() - Access time of session.

In <bold>distributed servlet container</bold>:
Migration of sessions will be handled by container-specific facilities
Attributes: Container must accept object that are <italic>serializable.</italic>
<italic>HttpSessinActivationListener</italic> during migration.


<bold><size:large>Dispatching Request</size:large></bold>
<italic>RequestDispatcher</italic>

Get from ServletContext:
<bold>getRequestDispatcher()</bold>
<list><list-item dir="ltr">Takes context relative path , "/abc"</list-item></list>

<bold>getNamedDispatcher()</bold>
<list><list-item dir="ltr">Takes the name of a servlet known to ServletContext
</list-item><list-item dir="ltr">If no servlet is found, returns <italic>null</italic></list-item></list>

<bold>ServletRequest.getRequestDispatcher</bold>
<list><list-item dir="ltr">get disaptcher, relative to the servlet path.</list-item></list>


<bold>RequestDispatcher.include()</bold>
Target servlet has access to all aspects of the request object.
Response object is limited:
Can only write OP to ServletOutputStream or riter
Commit reponse by writing content past the end of the response buffer.
Cannot set headers except session.
<bold>Following request attributes are set</bold>:
javax.servlet.include.request_uri
context_path
servlet_path
path_info
query_string

<bold>forward</bold>
Only when no output has been committed to the client.

<bold>Following request attributes are set</bold>:
javax.servlet.forward.request_uri
context_path
servlet_path
path_info
query_string


<bold><size:large>Web Application</size:large></bold>

Classes and resources packaged within the WAR are loaded in preference 
to classes and resources residing in container-wide library JARs.


A servlet or filter may throw the following exceptions during processing of a
request:
  • <italic>runtime</italic> exceptions or errors
  • <italic>ServletExceptions</italic> or subclasses thereof
  • <italic>IOExceptions</italic> or subclasses thereof
    The Web application may have declared error pages using the exception-
type element. In this case the container matches the exception type by comparing
the exception thrown with the list of error-page definitions that use the
exception-type element.

<bold>ServletContextListener</bold>
For instantiated listener instances that implement ServletContextListener,
call the contextInitialized() method.


</note-content></text>
  <last-change-date>2010-11-27T10:19:37.0375170+05:30</last-change-date>
  <last-metadata-change-date>2010-11-27T10:19:37.0375170+05:30</last-metadata-change-date>
  <create-date>2010-11-06T12:02:52.8058840+05:30</create-date>
  <cursor-position>6670</cursor-position>
  <width>1358</width>
  <height>300</height>
  <x>0</x>
  <y>0</y>
  <tags>
    <tag>system:notebook:Java</tag>
  </tags>
  <open-on-startup>False</open-on-startup>
</note>