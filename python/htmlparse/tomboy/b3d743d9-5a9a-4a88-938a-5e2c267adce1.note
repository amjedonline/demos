<?xml version="1.0" encoding="utf-8"?>
<note version="0.3" xmlns:link="http://beatniksoftware.com/tomboy/link" xmlns:size="http://beatniksoftware.com/tomboy/size" xmlns="http://beatniksoftware.com/tomboy">
  <title>file object</title>
  <text xml:space="preserve"><note-content version="0.1">file object

File object represents a connection to a file on your disk. 
Because file is a built-in type, there is no need to import any module before you use it.

* File object can actually represent a network connection, a connection to a hardware device such as a modem, or a connec-
tion to <link:internal>another</link:internal> running program


path="/home/amjed/sample.txt"
sample_file=file(path,"w")
sample_file.write("About Pythons\n")
print &gt;&gt; sample_file, "The end."
del sample_file

input = file(path,"r")
input.readline() // read one line at a time, including \n
input.read() // reads the <bold><italic>whole</italic></bold> unread content into one string


Older version of python uses<bold> open()</bold> function to create a file.
file() is a more consistent type creation method, should be used unless you want to support older versions of python.

"\n" takes one byte in length, even if the line is empty


<bold>Handle Exceptions</bold>:
try:
    input_file = file(path)
except IOError, error:
    print “problem while reading ‘%s’: %s” % (path, error)
    input_text = “”
else:
    input_text = input_file.read()


File raises <bold>IOError</bold>, while the <link:internal>functions</link:internal> in OS module raises <bold>OSError</bold>



<bold>os.path</bold> <bold>:</bold>

os.path.join("snakes","python")
<list><list-item dir="ltr">snakes/python</list-item></list>

os.path.split("snakes/python/boa")
("snakes/python","boa")

os.path.splitext("image.jpg")
("image",".jpg")

os.path.normpath("/home/amjed/scripts/../sample.txt")
"/home/amjed/sample.txt

os.path.abspath("sample.txt") # depends on current working directory
"/home/amjed/sample.txt"

os.path.exists("/home/amjed/sample.txt")
True

os.path.isdir("/home/amjed")
True

os.path.isfile("/home/amjed")
False

sorted(list)
sorted(list, function_ptr(str1, str2))


<bold>Renaming, copying, moving, unlinking files</bold>
import shutil

shutil.move("server.log","/var/logs/<link:internal>mysql</link:internal>/server.log")

shutil.rename("/home/amjed/scripts/first.py","/home/amjed/scripts/helloworld.py")
shutil.rename("/home/amjed/scripts/first.py","/home/amjed/python/") 
<italic># Note the destination directory name</italic>

shutil.remove("/home/amjed/sample.txt")
shutil.unlink("/home/amjed/sample.txt")

shutil.copy("/home/amjed/<link:internal>important</link:internal>.txt","/home/amjed/backup/")


os.makedir("/home/amjed/scripts") #creates only the last dir
os.makdirs("/home/amjed/scripts/py/temp") # creates intermediate directories if they dont exists

os.rmdir("/home/amjed/scripts") # deletes an empty dir
shutil.rmtree("/home/amjed/scripts") # deletes the scripts dir and all the children subdir and files in it


<bold>Globbing is hackers’ jargon for expanding wildcards in filename patterns</bold>

</note-content></text>
  <last-change-date>2010-09-09T04:28:49.5470530+02:00</last-change-date>
  <last-metadata-change-date>2011-11-27T22:44:01.1948680+01:00</last-metadata-change-date>
  <create-date>2010-03-24T07:46:18.5337130+01:00</create-date>
  <cursor-position>1049</cursor-position>
  <selection-bound-position>1049</selection-bound-position>
  <width>450</width>
  <height>360</height>
  <x>0</x>
  <y>0</y>
  <tags>
    <tag>system:notebook:python</tag>
  </tags>
  <open-on-startup>False</open-on-startup>
</note>