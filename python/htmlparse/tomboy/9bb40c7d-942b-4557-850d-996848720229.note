<?xml version="1.0" encoding="utf-8"?>
<note version="0.3" xmlns:link="http://beatniksoftware.com/tomboy/link" xmlns:size="http://beatniksoftware.com/tomboy/size" xmlns="http://beatniksoftware.com/tomboy">
  <title>Liferay MVC</title>
  <text xml:space="preserve"><note-content version="0.1">Liferay MVC


To create a control panel portlet:
In liferay-portlet:
	&lt;control-panel-entry-category&gt;content&lt;/control-panel-entry-category&gt;
	 &lt;control-panel-entry-weight&gt;1.5&lt;/control-panel-entry-weight&gt;


In liferay-display.xml:
	&lt;category name="category.hidden"&gt;
		&lt;portlet id="product-admin" /&gt;
	&lt;/category&gt;


Throw all imports and page declarations into <bold>init.<link:internal>jsp</link:internal></bold>
A pattern that Liferay uses to make this easier is to
throw all imports, tag library declarations, and variable initializations in one file called init.<link:internal>jsp</link:internal>. 
Every other <link:internal>JSP</link:internal> that is then created imports init.<link:internal>jsp</link:internal> so it can take advantage of all those declarations.

<bold><size:large>Alloy-UI:</size:large></bold>

If you have a tag which specifies a field in the format
fieldName, the tag will search the resource bundle for a matching language property in the
format field-name, and use that property value as the label for the field.




<bold>SessionMessages.addKey():</bold>

&lt;liferay-ui:success key="productSaved" message="product-saved-successfully"/&gt;
&lt;liferay-ui:success key="productDeleted" message="productDeleted" /&gt;
&lt;liferay-ui:success key="productUpdated" message="productUpdated" /&gt;
&lt;liferay-ui:error key="fields-required" message="fields-required" /&gt;
&lt;liferay-ui:error key="error-deleting" message="error-deleting" /&gt;
&lt;liferay-ui:error key="error-updating" message="error-updating" /&gt;


If any of these messages appear in SessionMessages or SessionErrors, the tags
will activate and the actual message from the Language.properties file will be displayed
to the user. If the messages aren't in SessionMessages or SessionErrors, nothing will
appear on the page.


<bold>Messages in mulitple languages:</bold>
Ff you wanted to provide your message keys in
<link:internal>Spanish</link:internal>, you could create a file called Language_es.propertie

Open the build.xml file that you have been using to deploy your project. You'll notice that
it is pretty small, as all of its functionality is derived from other <link:internal>Ant</link:internal> scripts that are stored in
the Plugins SDK. Insert the following <link:internal>Ant</link:internal> task just below the &lt;import&gt; tag:
&lt;target name="build-lang"&gt;
&lt;antcall target="build-lang-cmd"&gt;
&lt;param name="lang.dir" value="docroot/WEB-INF/src/content" /&gt;
&lt;param name="lang.file" value="Language" /&gt;
&lt;/antcall&gt;
&lt;/target&gt;

Run the <link:internal>ant</link:internal> command:
<link:internal>ant</link:internal> build-lang

<link:internal>Ant</link:internal> targets which have the ability to use the Babelfish (<link:url>http://babelfish.yahoo.com</link:url>) service to translate all of the keys in your file
to multiple languages. All we did by providing the <link:internal>Ant</link:internal> task we created was to give those <link:internal>Ant</link:internal>
targets the parameters they needed to do their work: namely, the folder where our
Language.properties file exists and the name of the file. Once we did that, we were able
to use Babelfish to generate all of the language files you now see in that folder.


</note-content></text>
  <last-change-date>2011-03-21T16:54:05.3325150+01:00</last-change-date>
  <last-metadata-change-date>2011-03-21T16:54:05.3325150+01:00</last-metadata-change-date>
  <create-date>2011-03-21T15:59:36.2992460+01:00</create-date>
  <cursor-position>1822</cursor-position>
  <width>450</width>
  <height>687</height>
  <x>0</x>
  <y>0</y>
  <tags>
    <tag>system:notebook:Liferay</tag>
  </tags>
  <open-on-startup>False</open-on-startup>
</note>