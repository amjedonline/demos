<?xml version="1.0" encoding="utf-8"?>
<note version="0.3" xmlns:link="http://beatniksoftware.com/tomboy/link" xmlns:size="http://beatniksoftware.com/tomboy/size" xmlns="http://beatniksoftware.com/tomboy">
  <title>Elementary portlets</title>
  <text xml:space="preserve"><note-content version="0.1">Elementary portlets

Unified web interface to data and tools scattered across many sources.


<bold>Portlet lifecycle</bold>:

init()

processAction()
render()

destroy()


<bold><size:large>Portlet URL:</size:large></bold>
Can be either of
<bold>ActionRequest</bold> - Only one action request to a portlet.
<bold>RenderRequest</bold> - Render request to all the portlets in the window.


<bold>Query parameters</bold>
p_p_id			Name of the portlet
p_p_lifecycle 		0 | 1 | 2
	0  			render
	1  			action
	2  			resource
p_p_state 		Window State
p_p_col	 		Column id related to Layout template
p_p_col_count 	Value of the column count


<bold>Classes</bold>
PortletConfig
ResourceBundle
PortletContext
The PortletContext interface defines a portlet view of the portlet
container.
PortletRequest
	ActionRequest
	RenderRequest

String USER_INFO = "javax.portlet.userinfo";
String LIFECYCLE_PHASE = "javax.portlet.lifecycle_phase";
String RENDER_PART = "javax.portlet.render_part";
String RENDER_HEADERS = "RENDER_HEADERS";

public ActionForward render(
	ActionMapping mapping, 
	ActionForm form, 
	PortletConfig portletConfig,
	RenderRequest req, 
	RenderResponse res) {
		String title = req.getParameter("title");
}

<bold>PortalResponse</bold>
The PortletResponse defines the base interface to assist a portlet in creating and
sending a response to the client.

void addProperty(Cookie cookie);
void addProperty(String key, Element element);
void addProperty(String key, String value);
Element createElement(String tagName);
String encodeURL(String path);
String getNamespace();
void setProperty(String key, String value);



<bold>PortalPreferences</bold>
boolean isReadOnly(String key);
String getValue(String key, String def);
String[] getValues(String key, String[] def);
void setValue(String key, String value);
void setValues(String key, String[] values);
Enumeration&lt;String&gt; getNames();
Map&lt;String, String[]&gt; getMap();
void reset(String key);
void store();

Changes are persisted when the store method
is called.
Store method can be called only in processAction
If store method not called, changes are discarded.
Types of preference: modifiable and ready-only


<bold>Extending 286 </bold>

Using <bold>Portlet Filters</bold>:
Plug filter around any life cycle method call of the portlet.
PortletFilter &gt; ActionFilter, EventFilter, RenderFilter, ResourceFilter | <bold>AERR</bold>

void init(FilterConfig filterConfig);
void destroy();

One method:
void doFilter(EventRequest request, EventResponse response,
FilterChain chain);


<bold>portlet managed modes</bold> - portlet.xml
&lt;custom-portlet-mode&gt;
  &lt;description&gt;Look and Feel&lt;/description&gt;
  &lt;portlet-mode&gt;lookAndFeel&lt;/portlet-mode&gt;
  &lt;portal-managed&gt;false&lt;/portal-managed&gt;
&lt;/custom-portlet-mode&gt;


<bold>Container runtime options</bold>


Container runtime options  - Across all portlets
Portlet runtime options - Overrides container runtime options

&lt;container-runtime-option&gt;
	
&lt;/container-runtime-option&gt;


<bold>Serving resources / Resource URLs</bold>
Interface ResourceServingPortlet, serveResource() method.

<bold><size:large>Resource URL</size:large></bold>

<bold>PortletURL extends BaseURL</bold>:

<italic>void write(java.io.Writer out, boolean escapeXML);
void setWindowState (WindowState windowState);
void setPortletMode (PortletMode portletMode);
PortletMode getPortletMode ();
WindowState getWindowState ();
void removePublicRenderParameter(String name);
</italic>
<bold>ResourceURL</bold>:
Invokes serverResource method of ResourceServingPortlet interface.
Can be created with the createResourceURL method on RenderResponse and ResourceResponse.

<italic>ResourceURL url = renderResponse.createResourceURL();</italic>

Can set parameters on the resource URLS as for portlet URLs.
You can set the path to your resource as ID
<italic>url.setResourceID("WEB-INF/portlet-ext.xml");</italic>

<bold><size:large>Annotations in Portlets</size:large></bold>

<bold>ProcessAction</bold> annotates a method that should <link:internal>process</link:internal> a specific action.
TO allow dispatching, Action URL needs to include the javax.portlet.action parameter that is predefined action name in ActionRequest.ACTION_NAME.

<bold>ProcessEvent</bold> annotates methods that should <link:internal>process</link:internal> specific events.

<bold>RenderMode</bold> annotates methods that should render a specific portlet mode.


<bold>Caching</bold>
<italic>PortletRequest</italic> returns an array containing all of the Cookie properties with the
following methods:
<italic>    String getScheme();
    String getServerName();
    String getServerPort();
    String getWindowID();</italic>


<bold><size:large>Additional Implicit objects</size:large></bold>
request, response, portletConfig.
<list><list-item dir="ltr">  <italic>portletSession</italic>—accesses the portlet-scoped session
</list-item><list-item dir="ltr">  <italic>portletSessionScope</italic>—accesses the portlet-scoped session attribute key/ values map
</list-item><list-item dir="ltr">  <italic>portletPreferences</italic>—used for the portlet preferences
</list-item><list-item dir="ltr">  portletPreferencesValues—used for the portlet preferences key/ values map</list-item></list>

<bold>URL generation tags</bold>
copyCurrentRenderParameters - Copies current private render parameters to the URL
escapeXML - by default is on, can turn it OFF


<bold><size:large>Interprocess Communication:</size:large></bold>

<bold>session - </bold>
sharing data between different artifacts within same application via <bold>session</bold> in application scope.
PortletSession - APPLICATION | PORTEL scopes, PortletContext

<bold>render parameters</bold> - Using public render parameters to share render states between portlets.


<bold>events</bold> - Using portlet events that a portlet can send and receive.
page parameters.


<bold>PortletSession</bold>
Per user.
All portlets can access if application scope.
PortletSession.PORTLET_SCOPE
PortletSession.APPLICATION_SCOPE


<bold>PortletContext</bold>
Shared among all the users and all the portlets in the portal application.


<bold>Page parameters</bold>
/faq?p_p_lifecycle=0&amp;p_p_id=faq_WAR_ipcportlet&amp;p_p_category=<link:internal>Top</link:internal>
<link:internal>Questions</link:internal>

In Url:
p_p_category=<link:internal>Top</link:internal> <link:internal>Questions</link:internal>
Accessed:
String category = renderRequest.getAttribute("category");
It is like p_p_param-name

<bold>Portlet Events</bold>
Implement EventPortlet interface to receive events.
<italic>processEvent</italic> is called with <italic>EventRequest</italic> and <italic>EventResponse</italic>

</note-content></text>
  <last-change-date>2011-03-11T17:16:27.7534200+01:00</last-change-date>
  <last-metadata-change-date>2011-03-11T17:16:27.7534200+01:00</last-metadata-change-date>
  <create-date>2011-02-02T14:06:19.1743770+01:00</create-date>
  <cursor-position>3420</cursor-position>
  <width>450</width>
  <height>360</height>
  <x>0</x>
  <y>0</y>
  <tags>
    <tag>system:notebook:Portlets</tag>
  </tags>
  <open-on-startup>False</open-on-startup>
</note>