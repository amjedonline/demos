<?xml version="1.0" encoding="utf-8"?>
<note version="0.3" xmlns:link="http://beatniksoftware.com/tomboy/link" xmlns:size="http://beatniksoftware.com/tomboy/size" xmlns="http://beatniksoftware.com/tomboy">
  <title>Evolutionary  V/S Planned Design</title>
  <text xml:space="preserve"><note-content version="0.1">Evolutionary  V/S Planned Design

<list><list-item dir="ltr">The design of the system grows as the system is implemented. </list-item></list>

<list><list-item dir="ltr">Design is part of the programming processes and as the program evolves the design changes.
</list-item><list-item dir="ltr">Cant possibly work in ad-hoc due to <italic>Change Curve</italic></list-item></list>


<bold>Planned design</bold>

<bold>Right Approach - </bold>
<list><list-item dir="ltr">Lies in between
</list-item><list-item dir="ltr">Flattening the Change Curve
</list-item><list-item dir="ltr"><link:internal>Refactoring</link:internal> for change
</list-item><list-item dir="ltr">Integrate Continuous integration and testing.</list-item></list><strikethrough>


</strikethrough><bold>Xtreme Programming</bold>
<list><list-item dir="ltr">Do the simplest Thing that could possibly work
</list-item><list-item dir="ltr">You Arent Going to Need It (YAGNI)</list-item></list>



<bold>YAGNI</bold>
<list><list-item dir="ltr">Shouldnt add any code today which will only be used by feature that is needed tomorrow.
</list-item><list-item dir="ltr">What about Complicated things like
<list><list-item dir="ltr"><link:internal>Frameworks</link:internal>
</list-item><list-item dir="ltr">Reusable Components
</list-item><list-item dir="ltr">Flexible Design
</list-item></list></list-item><list-item dir="ltr">XP's advice - 
<list><list-item dir="ltr">Not build flexible components and <link:internal>frameworks</link:internal> for the first case that needs that functionality.
</list-item><list-item dir="ltr">Let the structure grow as they are needed.
</list-item><list-item dir="ltr"><italic>Because - more likely to be wrong than right.</italic>
</list-item></list></list-item><list-item dir="ltr">Simple V/S Complicated design
<list><list-item dir="ltr">More difficult to understand.
</list-item><list-item dir="ltr">Modification becomes harder by added complexity.
</list-item><list-item dir="ltr">Adds cost during the period between when the more complicated design was added and when it was needed.</list-item></list></list-item></list>




<bold>Change Curve</bold>
The change curve says that as the project runs, it becomes exponentially more expensive to make changes. </note-content></text>
  <last-change-date>2010-11-13T20:15:19.4879190+05:30</last-change-date>
  <last-metadata-change-date>2010-11-13T20:15:19.4879190+05:30</last-metadata-change-date>
  <create-date>2010-11-13T19:53:22.9156570+05:30</create-date>
  <cursor-position>902</cursor-position>
  <width>450</width>
  <height>360</height>
  <x>0</x>
  <y>0</y>
  <tags>
    <tag>system:notebook:Design Patterns</tag>
  </tags>
  <open-on-startup>False</open-on-startup>
</note>