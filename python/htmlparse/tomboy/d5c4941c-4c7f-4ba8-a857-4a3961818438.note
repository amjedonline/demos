<?xml version="1.0" encoding="utf-8"?>
<note version="0.3" xmlns:link="http://beatniksoftware.com/tomboy/link" xmlns:size="http://beatniksoftware.com/tomboy/size" xmlns="http://beatniksoftware.com/tomboy">
  <title>Virtual hosting with Apache</title>
  <text xml:space="preserve"><note-content version="0.1">Virtual hosting with Apache


In this article we will talk about one of the most powerful feature of Apache web server, that is Virtual hosting.
At the end of this article what you will learn is:
*	Different method of Virtual hosting, and the difference between them.
*	Various <link:internal>DNS</link:internal> confguration that helps you achieve Virtual hosting.

<bold>What is virtual hosting</bold> <bold>?</bold>
One of the among the most powerful and widely used feature Apache web server offers is Virtual Hosting.
Virtua Hosting provides the web adminstrator an ability to host multiple websites on a single Apache <link:internal>Installation</link:internal>.
Some of the advantages of Virtual Hosting are:
*	Minimizing the maintanence overhead of mulitple Apache installations.
*	Leveraging the power of the server machine hardware.


One way to host multiple host on a single server achine is to have multiple Apache Web server instances.
And <link:internal>another</link:internal> way of exponential ease is Virtual Hosting.
Basically Virtual Hosting can be categorized into two methods, depending on <italic>the way the Host names are mapped to their corresponding IP addresses</italic>.

<bold>*IP based </bold>Virtual hosting involves assigning each domain name to its own IP adress.
<bold>*Name based </bold>Virtual<bold> </bold>hosting refers to assigning mulitple domain names to a single IP address.


<bold><link:internal>DNS</link:internal></bold><bold>(Domain Name System)</bold> refers to the system of resolving a domain name/Host name to an IP address.
There are dedicated servers on the internet to this <link:internal>Job</link:internal>, and these servers are called <link:internal>DNS</link:internal> Servers or Name servers.
<link:internal>DNS</link:internal> plays a vital role in Virtual hosting.
Following are the possible ways in which an IP address can be mapped to the host name:

<bold>*One-to-One mapping:</bold>
Here a Host name is mapped to an individual IP address.This is method is widely known as the foundation of IP based Virtual Hosting.

<bold>*One-to-many:</bold>
This involves assigning of a Host name to multiple IP addresses.This method of virtual hosting is basically used for load balancing.
A host name is assigined to multiple IP addresses. An algorithm can be devised on the <link:internal>DNS</link:internal> server to respond with a different IP address, to the queries for the address of that host.
This way the load can be shared across a number of web servers.

<bold>*many-to-one:</bold>
This means that you assign a number of host names to different IP address.
This is  also known as the foundation of Name based virtual hosting

<bold><link:internal>DNS</link:internal></bold><bold> configuration:</bold>
A domain name to IP address mapping should be done before you configure you web server to listen on that IP address.
Setting this mapping is a trivial task, while getting access to those <link:internal>DNS</link:internal> servers is very difficult. Not everyone get those priviledges :)
If you are doing this exercises in you windows machine, the easiest way to do the <link:internal>DNS</link:internal> mapping is 
by adding an entry in the %WINDIR%/system32/Drivers/etc/hosts.ics file.

<bold>IP-based Virtual Hosting:</bold>
As mentioned earlier, this method consists of assiging a different IP address to each domain name.
Following configuration in the httpd.conf file of you apache server, tells the server :
-To listen the requests on Port 80 for IP addresses 192.168.128.10 and 192.168.129.10
-The Document root to serve for requests being listened at 192.68.128.10 is <link:url>/usr/local/www-docs/host1</link:url>
-The Document root to serve for requests being listened at 192.68.129.10 is <link:url>/usr/local/www-docs/host2</link:url>
-Other required configuration values for these virtual hosts are inherited from the global setting


Listen 192.168.128.10:80
Listen 192.168.129.10:80

&lt;VirtualHost 192.168.128.10:80&gt;
DocumentRoot <link:url>/usr/local/www-docs/host1</link:url>
&lt;/VirtualHost&gt;

&lt;VirtualHost 192.168.129.10:80&gt;
DocumentRoot <link:url>/usr/local/www-docs/host2</link:url>
&lt;/VirtualHost&gt;


<bold>Name-Based Virtual Hosting:</bold>
As a way to counter the requirement of one IP address per web site/virtual host, a new header field Host: was introduced with
HTTP/1.1 protocol.
A browser needs to be HTTP/1.1 compaint in order to leverage this feature. 
Rest assured, every browser today supports HTTP/1.1; so you need not worry about that when you plan you configuration.
So a request might look similar to the below:

GET / HTTP/1.1
Accept-Language: en-us
User-Agent: Mozilla/4.0 (compatible; MSIE 5.01; Windows NT 5.0)
<bold>Host: host1.mydomain.com</bold>

When a client sends a Host:host1.mydomain.com, apache knows on which IP to listed to this request and which document to server.
This is possible with the <bold>NameVirtualHost</bold> directive in the Apace configuration file.
An example entry in the httpd.conf is given below:

NameVirtualHost 192.168.128.10
Listen 192.168.128.10:80

&lt;VirtualHost 192.168.128.10&gt;
ServerName host1.example.com
DocumentRoot <link:url>/usr/local/www-docs/host1</link:url>
&lt;/VirtualHost&gt;

&lt;VirtualHost 192.168.128.10&gt;
ServerName host2.example.com
DocumentRoot <link:url>/usr/local/www-docs/host2</link:url>
&lt;/VirtualHost&gt;

Some useful techniqies in Virtual Hosting:
ServerAlias-
You may have requirement where in, you want multiple host names to be served with the same set of configuration.
And you obiviously dont want to repeat this settings, you can do this with the help of ServerAlias directive of Apache.
ServerAlias directive allows you to mention a set of host names that might show up in the Host header and you dont need a separate Virtual Host directive for each of them.

Example:

&lt;VirtualHost 192.168.128.10&gt;
ServerName host1.example.com
ServerAlias example ex1
DocumentRoot <link:url>/usr/local/www-docs/host1</link:url>
&lt;/VirtualHost&gt;


<bold>ServerPath</bold>
Have you ever imagined how the ISPs are able to configure thousands of virtual host onto a single Server machine or even a bunch of server machines
without getting there hand dirty everytime a user registers a Virtual Host for himself??
These are called <bold>cookie-cutter  virtual hosts</bold>, you can in principle tell Apache to map each virtual host to a separate
content tree using the pattern-matching rules in <bold>VirtualDocumentRoot</bold> directive.
This is also called as <bold>mass virtual hosting</bold>, an example is illustrated below:

NameVirtualHost 192.168.128.10
Listen 192.168.128.10:80
VirtualDocumentRoot <link:url>/usr/local/www-docs/%1</link:url>

The above example is <link:internal>self</link:internal> explanatory, and I dont feel any need to digg it in any detail.

<bold>Port based vitual hosting.</bold>
This is what I call it as, this is very instrumental in the intranet environments, and where you usually dont have access to <link:internal>DNS</link:internal> server.
Here we can assign each Virtual host to a specific TCP port.
As shown in the below example, a different content tree is served at each port.

Listed 192.168.128:8000
Listed 192.168.128:8008
Listed 192.168.128:8012
Listed 192.168.128:8080

ServerName intranet.mycompany.com

&lt;VirtualHost 192.168.128:8000&gt;
DocumentRoot <link:url>/usr/local/www-docs/tools</link:url>
&lt;/VirtualHost&gt;

&lt;VirtualHost 192.168.128:8008&gt;
DocumentRoot <link:url>/usr/local/www-docs/help</link:url>
&lt;/VirtualHost&gt;

&lt;VirtualHost 192.168.128:8012&gt;
DocumentRoot <link:url>/usr/local/www-docs/hris</link:url>
&lt;/VirtualHost&gt;

&lt;VirtualHost 192.168.128:8080&gt;
DocumentRoot <link:url>/usr/local/www-docs/library</link:url>
&lt;/VirtualHost&gt;


And now, one can access the library web site with the URL <link:url>http://intranet.mycompany.com</link:url>
</note-content></text>
  <last-change-date>2011-07-24T19:45:45.5860000+05:30</last-change-date>
  <last-metadata-change-date>2011-07-24T19:45:45.5860000+05:30</last-metadata-change-date>
  <create-date>2010-11-07T12:39:54.5527260+05:30</create-date>
  <cursor-position>4167</cursor-position>
  <width>450</width>
  <height>360</height>
  <x>0</x>
  <y>0</y>
  <tags>
    <tag>system:notebook:blog</tag>
  </tags>
  <open-on-startup>False</open-on-startup>
</note>